\newpage

\section{Procedury}

\subsection{RegisterStudent}
Rejestruje nowego studenta do bazy danych.

\begin{lstlisting}[language = SQL]
CREATE PROCEDURE RegisterStudent
@FirstName varchar(30),
@LastName varchar(30),
@Email varchar(30),
@BirthDate date,
@Address varchar(30),
@City varchar(30),
@Region varchar(30),
@PostalCode varchar(30),
@Country varchar(30),
@Phone varchar(30)
AS
BEGIN
    INSERT INTO students (FirstName, LastName, Email, BirthDate, Address, City, Region, PostalCode, Country, Phone)
    VALUES (@FirstName, @LastName, @Email, @BirthDate, @Address, @City, @Region, @PostalCode, @Country, @Phone)
END
\end{lstlisting}

\subsection{RegisterLecturer}
Rejestruje nowego wykładowcę do bazy danych

\begin{lstlisting}[language = SQL]
CREATE PROCEDURE [dbo].[RegisterLecturer]
@FirstName varchar(30),
@LastName varchar(30),
@Email varchar(30),
@BirthDate date,
@HireDate date = NULL,
@Address varchar(30),
@City varchar(30),
@Region varchar(30),
@PostalCode varchar(30),
@Country varchar(30),
@Phone varchar(30),
@Language varchar(30)
AS
BEGIN
    IF @HireDate IS NULL
    SET @HireDate = GETDATE();

    DECLARE @LanguageID INT;
    SELECT @LanguageID = LanguageID FROM languages WHERE LanguageName = @Language;

    INSERT INTO lecturers (FirstName, LastName, Email, BirthDate, HireDate, Address, City, Region, PostalCode, Country, Phone, LanguageID)
    VALUES (@FirstName, @LastName, @Email, @BirthDate, @HireDate, @Address, @City, @Region, @PostalCode, @Country, @Phone, @LanguageID)
END
\end{lstlisting}

\subsection{AddEvent}
Dodaje nowe wydarzenie.

\begin{lstlisting}[language = SQL]
CREATE PROCEDURE AddEvent
@Title varchar(30),
@Type varchar(30),
@BeginDate DATE,
@EndDate DATE,
@Capacity INT,
@EventPrice DECIMAL(10,2),
@Description varchar(30)

AS
BEGIN
    DECLARE @TypeID INT;
    SELECT @TypeID = TypeID FROM types WHERE TypeName = @Type

    INSERT INTO events (Title, TypeID, BeginDate, EndDate, Capacity, EventPrice, Description)
    VALUES (@Title, @TypeID, @BeginDate, @EndDate, @Capacity, @EventPrice, @Description)
END
\end{lstlisting}

\subsection{AddModule}
Dodaje nowy moduł.

\begin{lstlisting}[language = SQL]
CREATE PROCEDURE AddModule
@EventID INT,
@ModuleNo INT,
@LecturerID INT,
@TranslatorID INT = NULL,
@Description VARCHAR(30) = '',
@BeginDate DATETIME,
@EndDate DATETIME,
@Capacity INT = NULL,
@RoomID INT,
@ModulePrice INT
AS
BEGIN
    DECLARE @LanguageID INT
    IF @TranslatorID IS NULL
        SELECT @LanguageID = LanguageID FROM lecturers WHERE LecturerID = @LecturerID
    ELSE 
        SELECT @LanguageID = LanguageID FROM languages WHERE LanguageName = 'polish'
   
    IF @Capacity IS NULL
    BEGIN

        DECLARE @RoomCapacity INT
        SELECT @RoomCapacity = Capacity FROM rooms WHERE RoomID = @RoomID
        SET @Capacity = @RoomCapacity
    END
    
    DECLARE @EventCapacity INT
    SELECT @EventCapacity = Capacity FROM events WHERE EventID = @EventID
    IF @Capacity < @EventCapacity
        THROW 50000, 'Capacity is less than EventCapacity', 1
    
    DECLARE @TakenRooms TABLE (RoomNumber INT)
    INSERT INTO @TakenRooms (RoomNumber)
    EXEC RoomsTaken @BeginDate, @EndDate

    IF EXISTS (
        SELECT 1
        FROM @TakenRooms as sub
        WHERE sub.RoomNumber = @RoomID
    )
        THROW 500001, 'Room is not available then', 1

    INSERT INTO modules (EventID, ModuleNo, LecturerID, LanguageID, TranslatorID, Description, BeginDate, EndDate, Capacity, RoomID, ModulePrice)
    VALUES (@EventID, @ModuleNo, @LecturerID, @LanguageID, @TranslatorID, @Description, @BeginDate, @EndDate, @Capacity, @RoomID, @ModulePrice)
END
\end{lstlisting}

\subsection{AddWebinar}
Dodaje nowy webinar.

\begin{lstlisting}[language = SQL]
CREATE PROCEDURE AddWebinar
@Title varchar(30),
@BeginDate DATETIME,
@EndDate DATETIME,
@Capacity INT = NULL,
@EventPrice DECIMAL(10,2),
@Description varchar(30),
@LecturerID INT,
@TranslatorID INT = NULL


AS
BEGIN
    DECLARE @TypeID INT;
    SELECT @TypeID = TypeID FROM types WHERE 'webinar' = TypeName

    DECLARE @LanguageID INT
    IF @TranslatorID IS NULL
        SELECT @LanguageID = LanguageID FROM lecturers WHERE LecturerID = @LecturerID
    ELSE 
        SELECT @LanguageID = LanguageID FROM languages WHERE LanguageName = 'polish'
    
    IF @Capacity IS NULL
    BEGIN
        SET @Capacity = 1000
    END


    INSERT INTO events (Title, TypeID, BeginDate, EndDate, Capacity, EventPrice, Description)
    VALUES (@Title, @TypeID, CAST(@BeginDate AS DATE), CAST(@EndDate AS DATE), @Capacity, @EventPrice, @Description)
     
    DECLARE @LastIndex INT
    SET @LastIndex = SCOPE_IDENTITY();

    INSERT INTO modules(EventID, ModuleNo, LecturerID, LanguageID, TranslatorID, [Description], BeginDate, EndDate, Capacity, RoomID, ModulePrice)
    VALUES (@LastIndex, 1, @LecturerID, @LanguageID, @TranslatorID, @Description, @BeginDate, @EndDate, @Capacity, 1, @EventPrice)
END
\end{lstlisting}

\subsection{RoomsFree}
Wyświetla listę wolnych sal w zadanym przedziale czasowym.

\begin{lstlisting}[language = SQL]
CREATE PROCEDURE RoomsFree 
@BeginDate datetime, 
@EndDate datetime
AS
BEGIN
    SELECT R.RoomID FROM modules M
    RIGHT JOIN rooms R ON R.RoomID = M.RoomID
    WHERE (M.EndDate < @BeginDate OR M.BeginDate > @EndDate) OR M.ModuleID IS NULL   
END
\end{lstlisting}

\subsection{RoomsTaken}
Wyświetla listę zajętych sal w zadanym przedziale czasowym.

\begin{lstlisting}[language = SQL]
CREATE PROCEDURE RoomsTaken 
@BeginDate datetime, 
@EndDate datetime
AS
BEGIN
    SELECT R.RoomID FROM modules M
    JOIN rooms R ON R.RoomID = M.RoomID
    WHERE (M.BeginDate BETWEEN @BeginDate AND @EndDate) OR (M.EndDate BETWEEN @BeginDate AND @EndDate)   
END
\end{lstlisting}

\subsection{EnrollStudent2Event}
Zapisuje danego studenta do danego wydarzenia.

\begin{lstlisting}[language = SQL]
CREATE PROCEDURE EnrollStudent2Event
@StudentID int, 
@EventID int
AS
BEGIN
    INSERT INTO event_students (StudentID, EventID, IsPaidAdvance, IsPaidFull)  
    VALUES (@StudentID, @EventID, 1, 1)
    DECLARE @LastIdentity INT
    SET @LastIdentity = SCOPE_IDENTITY();
    
    DECLARE @EventModules TABLE (ModuleID INT)
    INSERT INTO @EventModules (ModuleID)
    SELECT ModuleID FROM modules M WHERE M.EventID = @EventID

    DECLARE @RowCount INT = 1
    DECLARE @TotalRows INT;

    SELECT @TotalRows = COUNT(*) FROM @EventModules 

    WHILE @RowCount <= @TotalRows
    BEGIN
        DECLARE @TempModuleID INT
        SELECT @TempModuleID = Sub.ModuleID FROM (    
            SELECT EM.ModuleID, ROW_NUMBER() OVER (ORDER BY EM.ModuleID) AS ROW_NUM FROM @EventModules AS EM
        ) as Sub
        WHERE ROW_NUM = @RowCount
        INSERT INTO attendance (EventStudentID, ModuleID, IsPresent) 
        VALUES (@LastIdentity, @TempModuleID, NULL)
        SET @RowCount = @RowCount+1;
    END
END
\end{lstlisting}    